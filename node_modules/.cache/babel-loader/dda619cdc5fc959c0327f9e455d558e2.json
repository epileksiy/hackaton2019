{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types'; // Works around issues with context updates failing to propagate.\n// Caveat: the context value is expected to never change its identity.\n// https://github.com/facebook/react/issues/2517\n// https://github.com/reactjs/react-router/issues/470\n\nvar contextProviderShape = PropTypes.shape({\n  subscribe: PropTypes.func.isRequired,\n  eventIndex: PropTypes.number.isRequired\n});\n\nfunction makeContextName(name) {\n  return '@@contextSubscriber/' + name;\n}\n\nvar prefixUnsafeLifecycleMethods = parseFloat(React.version) >= 16.3;\nexport function ContextProvider(name) {\n  var _childContextTypes, _config;\n\n  var contextName = makeContextName(name);\n  var listenersKey = contextName + '/listeners';\n  var eventIndexKey = contextName + '/eventIndex';\n  var subscribeKey = contextName + '/subscribe';\n  var config = (_config = {\n    childContextTypes: (_childContextTypes = {}, _childContextTypes[contextName] = contextProviderShape.isRequired, _childContextTypes),\n    getChildContext: function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextName] = {\n        eventIndex: this[eventIndexKey],\n        subscribe: this[subscribeKey]\n      }, _ref;\n    },\n    // this method will be updated to UNSAFE_componentWillMount below for React versions >= 16.3\n    componentWillMount: function componentWillMount() {\n      this[listenersKey] = [];\n      this[eventIndexKey] = 0;\n    },\n    // this method will be updated to UNSAFE_componentWillReceiveProps below for React versions >= 16.3\n    componentWillReceiveProps: function componentWillReceiveProps() {\n      this[eventIndexKey]++;\n    },\n    componentDidUpdate: function componentDidUpdate() {\n      var _this = this;\n\n      this[listenersKey].forEach(function (listener) {\n        return listener(_this[eventIndexKey]);\n      });\n    }\n  }, _config[subscribeKey] = function (listener) {\n    var _this2 = this; // No need to immediately call listener here.\n\n\n    this[listenersKey].push(listener);\n    return function () {\n      _this2[listenersKey] = _this2[listenersKey].filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }, _config);\n\n  if (prefixUnsafeLifecycleMethods) {\n    config.UNSAFE_componentWillMount = config.componentWillMount;\n    config.UNSAFE_componentWillReceiveProps = config.componentWillReceiveProps;\n    delete config.componentWillMount;\n    delete config.componentWillReceiveProps;\n  }\n\n  return config;\n}\nexport function ContextSubscriber(name) {\n  var _contextTypes, _config2;\n\n  var contextName = makeContextName(name);\n  var lastRenderedEventIndexKey = contextName + '/lastRenderedEventIndex';\n  var handleContextUpdateKey = contextName + '/handleContextUpdate';\n  var unsubscribeKey = contextName + '/unsubscribe';\n  var config = (_config2 = {\n    contextTypes: (_contextTypes = {}, _contextTypes[contextName] = contextProviderShape, _contextTypes),\n    getInitialState: function getInitialState() {\n      var _ref2;\n\n      if (!this.context[contextName]) {\n        return {};\n      }\n\n      return _ref2 = {}, _ref2[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _ref2;\n    },\n    componentDidMount: function componentDidMount() {\n      if (!this.context[contextName]) {\n        return;\n      }\n\n      this[unsubscribeKey] = this.context[contextName].subscribe(this[handleContextUpdateKey]);\n    },\n    // this method will be updated to UNSAFE_componentWillReceiveProps below for React versions >= 16.3\n    componentWillReceiveProps: function componentWillReceiveProps() {\n      var _setState;\n\n      if (!this.context[contextName]) {\n        return;\n      }\n\n      this.setState((_setState = {}, _setState[lastRenderedEventIndexKey] = this.context[contextName].eventIndex, _setState));\n    },\n    componentWillUnmount: function componentWillUnmount() {\n      if (!this[unsubscribeKey]) {\n        return;\n      }\n\n      this[unsubscribeKey]();\n      this[unsubscribeKey] = null;\n    }\n  }, _config2[handleContextUpdateKey] = function (eventIndex) {\n    if (eventIndex !== this.state[lastRenderedEventIndexKey]) {\n      var _setState2;\n\n      this.setState((_setState2 = {}, _setState2[lastRenderedEventIndexKey] = eventIndex, _setState2));\n    }\n  }, _config2);\n\n  if (prefixUnsafeLifecycleMethods) {\n    config.UNSAFE_componentWillReceiveProps = config.componentWillReceiveProps;\n    delete config.componentWillReceiveProps;\n  }\n\n  return config;\n}","map":null,"metadata":{},"sourceType":"module"}